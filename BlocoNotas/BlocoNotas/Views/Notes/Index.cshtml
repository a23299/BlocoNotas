@model IEnumerable<BlocoNotas.Models.Note>

@{
    ViewData["Title"] = "Minhas Notas";
}

<h1 class="mb-4">Notas</h1>

<div class="mb-3">
    <a class="btn btn-success" asp-controller="Notes" asp-action="Create">+ Nova Nota</a>
</div>

<div id="notesList" class="row gy-3"></div>

<!-- Modal para criar/editar nota -->
<div class="modal fade" id="noteModal" tabindex="-1" aria-labelledby="noteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form id="noteForm">
                <div class="modal-header">
                    <h5 class="modal-title" id="noteModalLabel">Nova Nota</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="noteId">
                    <div class="mb-3">
                        <label for="noteTitle" class="form-label">Título</label>
                        <input type="text" class="form-control" id="noteTitle" required>
                    </div>
                    <div class="mb-3">
                        <label for="noteContent" class="form-label">Conteúdo</label>
                        <textarea class="form-control" id="noteContent" rows="5"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-success">Guardar</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal: Partilhar Nota -->
<div class="modal fade" id="shareModal" tabindex="-1" aria-labelledby="shareModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="shareForm">
                <div class="modal-header">
                    <h5 class="modal-title" id="shareModalLabel">Partilhar Nota</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="shareNoteId">
                    <div class="mb-3">
                        <label for="shareWith" class="form-label">Nome do Utilizador</label>
                        <input type="text" class="form-control" id="shareWith" required>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="canEdit">
                        <label class="form-check-label" for="canEdit">Pode editar?</label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Partilhar</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal: Adicionar Tags à Nota -->
<div class="modal fade" id="tagModal" tabindex="-1" aria-labelledby="tagModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Adicionar Tag à Nota</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
            </div>
            <div class="modal-body">
                <select id="availableTags" class="form-select mb-3">
                    <option value="">Seleciona uma tag</option>
                </select>
                <div class="d-flex justify-content-between">
                    <button class="btn btn-primary" onclick="addTagToNote()">Adicionar</button>
                    <button class="btn btn-outline-secondary" onclick="openCreateTagModal()">+ Nova Tag</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal: Criar Nova Tag -->
<div class="modal fade" id="inlineTagModal" tabindex="-1" aria-labelledby="inlineTagModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="inlineTagForm">
                <div class="modal-header">
                    <h5 class="modal-title" id="inlineTagModalLabel">Nova Tag</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
                </div>
                <div class="modal-body">
                    <input type="text" id="inlineTagName" class="form-control" placeholder="Nome da Tag" required>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-success">Guardar</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                </div>
            </form>
        </div>
    </div>
</div>



<script>
    const apiUrl = "/api/NotesApi";
    const tagsApiUrl = "/api/TagsApi";
    const token = localStorage.getItem("token");

    function getAuthHeaders() {
        const headers = { "Content-Type": "application/json" };
        if (token) {
            headers["Authorization"] = `Bearer ${token}`;
        }
        return headers;
    }

    async function loadNotes() {
        const response = await fetch(apiUrl, { headers: getAuthHeaders() });
        const notes = await response.json();
        const list = document.getElementById("notesList");

        list.innerHTML = "";

        if (notes.length === 0) {
            list.innerHTML = "<p>Nenhuma nota encontrada.</p>";
            return;
        }

        for (const note of notes) {
            let tagsHtml = "";
            if (note.noteTags?.length > 0) {
                tagsHtml = `
                    <div class="position-absolute bottom-0 end-0 p-2">
                        ${note.noteTags.map(t => `<span class="badge bg-secondary me-1">${t.tag.name}</span>`).join('')}
                    </div>
                `;
            }

            list.innerHTML += `
                <div class="col-md-6 col-lg-4">
                    <div class="card h-100 shadow position-relative">
                        <div class="card-body">
                            <h5 class="card-title">${note.title}</h5>
                            <p class="card-text text-muted small">Atualizada em ${new Date(note.updatedAt).toLocaleString()}</p>
                            <p class="card-text">${note.content?.substring(0, 100) ?? ""}</p>
                            <a class="btn btn-sm btn-outline-primary me-2" href="/Notes/Edit/${note.noteId}">Editar</a>
                            <a class="btn btn-sm btn-outline-danger me-2" href="/Notes/Delete/${note.noteId}">Eliminar</a>
                            <button class="btn btn-sm btn-outline-info me-2" onclick="openShareModal(${note.noteId})">Partilhar</button>
                            <button class="btn btn-sm btn-outline-secondary" onclick="openTagModal(${note.noteId})">+ Tags</button>
                        </div>
                        ${tagsHtml}
                    </div>
                </div>
            `;
        }
    }

    function openCreateModal() {
        document.getElementById("noteId").value = "";
        document.getElementById("noteTitle").value = "";
        document.getElementById("noteContent").value = "";
        document.getElementById("noteModalLabel").innerText = "Nova Nota";
    }

    async function openEditModal(id) {
        const response = await fetch(`${apiUrl}/${id}`, { headers: getAuthHeaders() });
        const note = await response.json();

        document.getElementById("noteId").value = note.noteId;
        document.getElementById("noteTitle").value = note.title;
        document.getElementById("noteContent").value = note.content;
        document.getElementById("noteModalLabel").innerText = "Editar Nota";
        new bootstrap.Modal(document.getElementById('noteModal')).show();
    }

    async function deleteNote(id) {
        if (!confirm("Tens a certeza que queres eliminar esta nota?")) return;
        await fetch(`${apiUrl}/${id}`, {
            method: "DELETE",
            headers: getAuthHeaders()
        });
        loadNotes();
    }

    document.getElementById("noteForm").addEventListener("submit", async function (e) {
        e.preventDefault();

        const id = document.getElementById("noteId").value;
        const title = document.getElementById("noteTitle").value;
        const content = document.getElementById("noteContent").value;

        const payload = JSON.stringify({ noteId: id, title, content });

        if (id) {
            await fetch(`${apiUrl}/${id}`, {
                method: "PUT",
                headers: getAuthHeaders(),
                body: payload
            });
        } else {
            await fetch(apiUrl, {
                method: "POST",
                headers: getAuthHeaders(),
                body: payload
            });
        }

        bootstrap.Modal.getInstance(document.getElementById("noteModal")).hide();
        loadNotes();
    });

    
    function openShareModal(noteId) {
        document.getElementById("shareNoteId").value = noteId;
        document.getElementById("shareWith").value = "";
        document.getElementById("canEdit").checked = false;
        new bootstrap.Modal(document.getElementById('shareModal')).show();
    }

    // Modal de Tags
    let currentNoteId = null;

    function openTagModal(noteId) {
        currentNoteId = noteId;
        $('#tagModal').modal('show');

        refreshAvailableTags();
    }

    function addTagToNote() {
        const tagId = document.getElementById('availableTags').value;
        if (!tagId || !currentNoteId) return;

        fetch(`${tagsApiUrl}/notes`, {
            method: "POST",
            headers: getAuthHeaders(),
            body: JSON.stringify({ noteId: currentNoteId, tagId: parseInt(tagId) })
        })
            .then(response => {
                if (response.ok) {
                    $('#tagModal').modal('hide');
                    loadNotes();
                } else {
                    response.json().then(err => alert(err.message || "Erro ao adicionar tag"));
                }
            });
    }

    function openCreateTagModal() {
        document.getElementById("inlineTagName").value = "";
        new bootstrap.Modal(document.getElementById("inlineTagModal")).show();
    }

    document.getElementById("inlineTagForm").addEventListener("submit", async function (e) {
        e.preventDefault();
        const name = document.getElementById("inlineTagName").value;

        const response = await fetch("/api/TagsApi", {
            method: "POST",
            headers: getAuthHeaders(),
            body: JSON.stringify({ name })
        });

        if (response.ok) {
            bootstrap.Modal.getInstance(document.getElementById("inlineTagModal")).hide();
            alert("Tag criada com sucesso!");
            refreshAvailableTags(); // Atualiza o dropdown
        } else {
            const err = await response.json();
            alert(err.message || "Erro ao criar tag.");
        }
    });

    function refreshAvailableTags() {
        fetch(`${tagsApiUrl}/all`, {
            headers: getAuthHeaders()
        })
            .then(res => res.json())
            .then(tags => {
                const select = document.getElementById('availableTags');
                select.innerHTML = '<option value="">Seleciona uma tag</option>';
                tags.forEach(tag => {
                    const opt = document.createElement('option');
                    opt.value = tag.tagId;
                    opt.textContent = tag.name;
                    select.appendChild(opt);
                });
            });
    }


    document.getElementById("shareForm").addEventListener("submit", async function (e) {
        e.preventDefault();
        const noteId = document.getElementById("shareNoteId").value;
        const username = document.getElementById("shareWith").value;
        const canEdit = document.getElementById("canEdit").checked;

        const payload = JSON.stringify({ noteId, shareWithUsername: username, canEdit });

        const response = await fetch("/api/NoteSharesApi", {
            method: "POST",
            headers: getAuthHeaders(),
            body: payload
        });

        if (response.ok) {
            alert("Nota partilhada com sucesso!");
            bootstrap.Modal.getInstance(document.getElementById("shareModal")).hide();
        } else {
            const error = await response.json();
            alert(error.message ?? "Erro ao partilhar");
        }
    });

    document.addEventListener("DOMContentLoaded", () => {
    //    if (!token) {
    //        window.location.href = "/Home/LogIn";
    //        return;
    //    }
        loadNotes();
    });
</script>
