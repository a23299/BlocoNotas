@model IEnumerable<BlocoNotas.Models.Note>
@{
    ViewData["Title"] = "Minhas Notas";
}

<div class="container py-4">
    <!-- T√≠tulo principal da p√°gina -->
    <h1 class="mb-4 text-primary">Notas</h1>

    <!-- Bot√£o para criar uma nova nota -->
    <div class="mb-3">
        <a class="btn btn-success" asp-controller="Notes" asp-action="Create">+ Nova Nota</a>
    </div>

    <!-- √Årea onde as notas carregadas ser√£o exibidas -->
    <div id="notesList" class="row gy-4"></div>

    <!-- Modal para partilhar uma nota com outro utilizador -->
    <div class="modal fade" id="shareModal" tabindex="-1" aria-labelledby="shareModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <form id="shareForm">
                    <div class="modal-header">
                        <h5 class="modal-title" id="shareModalLabel">Partilhar Nota</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <!-- Guarda o ID da nota a partilhar -->
                        <input type="hidden" id="shareNoteId">
                        <!-- Campo para inserir o nome do utilizador com quem se quer partilhar -->
                        <div class="mb-3">
                            <label for="shareWith" class="form-label">Nome do Utilizador</label>
                            <input type="text" class="form-control" id="shareWith" required>
                        </div>
                        <!-- Op√ß√£o para permitir edi√ß√£o da nota partilhada -->
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="canEdit">
                            <label class="form-check-label" for="canEdit">Pode editar?</label>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Partilhar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Modal para adicionar tags a uma nota -->
    <div class="modal fade" id="tagModal" tabindex="-1" aria-labelledby="tagModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Adicionar Tag √† Nota</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
                </div>
                <div class="modal-body">
                    <!-- Dropdown para selecionar tag dispon√≠vel -->
                    <select id="availableTags" class="form-select mb-3">
                        <option value="">Seleciona uma tag</option>
                    </select>
                    <!-- Bot√µes para adicionar tag selecionada ou criar nova tag -->
                    <div class="d-flex justify-content-between">
                        <button class="btn btn-primary" onclick="addTagToNote()">Adicionar</button>
                        <button class="btn btn-outline-secondary" onclick="openCreateTagModal()">+ Nova Tag</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para criar uma nova tag -->
    <div class="modal fade" id="inlineTagModal" tabindex="-1" aria-labelledby="inlineTagModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <form id="inlineTagForm">
                    <div class="modal-header">
                        <h5 class="modal-title" id="inlineTagModalLabel">Nova Tag</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
                    </div>
                    <div class="modal-body">
                        <!-- Input para nome da nova tag -->
                        <input type="text" id="inlineTagName" class="form-control" placeholder="Nome da Tag" required>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-success">Guardar</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    const apiUrl = "/api/NotesApi";
    const tagsApiUrl = "/api/TagsApi";
    const noteShareapiUrl = "/api/NoteSharesApi";
    const token = localStorage.getItem("token");

    <!-- Fun√ß√£o para obter cabe√ßalhos HTTP incluindo autentica√ß√£o se existir -->
    function getAuthHeaders() {
        const headers = { "Content-Type": "application/json" };
        if (token) {
            headers["Authorization"] = `Bearer ${token}`;
        }
        return headers;
    }

    <!-- Fun√ß√£o que carrega as notas da API e exibe no DOM -->
    async function loadNotes() {
        const response = await fetch(apiUrl, { headers: getAuthHeaders() });
        const data = await response.json();

        const list = document.getElementById("notesList");
        list.innerHTML = "";

        <!-- Caso n√£o existam notas, mostra mensagem -->
        if (!data || data.length === 0) {
            list.innerHTML = "<p>Nenhuma nota encontrada.</p>";
            return;
        }

        <!-- Verifica se os dados representam um admin view (notas agrupadas por utilizador) -->
        const isAdminView = data[0] && data[0].userId && data[0].notes;

        if (isAdminView) {
            <!-- Renderiza grupos de notas por utilizador -->
            data.forEach(userGroup => {
                const userHeader = document.createElement("h3");
                userHeader.textContent = `Notas de ${userGroup.userName}`;
                list.appendChild(userHeader);

                const userRow = document.createElement("div");
                userRow.className = "row gy-3 mb-4";

                userGroup.notes.forEach(note => {
                    <!-- Gera badges das tags associadas -->
                    let tagsHtml = "";
                    if (note.tags?.length > 0) {
                        tagsHtml = note.tags.map(tag => `<span class="badge bg-info text-dark me-1">${tag}</span>`).join("");
                        tagsHtml = `<div class="mt-3">${tagsHtml}</div>`;
                    }

                    <!-- Adiciona cart√£o com detalhes da nota e bot√µes -->
                    userRow.innerHTML += `
                        <div class="col-md-6 col-lg-4">
                            <div class="card h-100 shadow-sm rounded position-relative">
                                <div class="card-body">
                                    <h5 class="card-title">${note.title}</h5>
                                    <p class="card-text text-muted small">üïí Atualizada em ${note.updatedAt ? new Date(note.updatedAt).toLocaleString() : 'N/A'}</p>
                                    <p class="card-text">${note.content?.substring(0, 100) ?? ""}</p>
                                    <a class="btn btn-sm btn-outline-primary me-2" href="/Notes/Edit/${note.noteId}">‚úèÔ∏è Editar</a>
                                    <a class="btn btn-sm btn-outline-danger me-2" href="/Notes/Delete/${note.noteId}">üóëÔ∏è Eliminar</a>
                                    <button class="btn btn-sm btn-outline-info me-2" onclick="openShareModal(${note.noteId})">ü§ù Partilhar</button>
                                    <button class="btn btn-sm btn-outline-secondary" onclick="openTagModal(${note.noteId})">üè∑Ô∏è + Tags</button>
                                    ${tagsHtml}
                                </div>
                            </div>
                        </div>
                    `;
                });

                list.appendChild(userRow);
            });
        } else {
            <!-- Renderiza lista simples de notas -->
            let markup = "";
            data.forEach(note => {
                let tagsHtml = "";
                if (note.tags?.length > 0) {
                    tagsHtml = note.tags.map(tag => `<span class="badge bg-info text-dark me-1">${tag}</span>`).join("");
                    tagsHtml = `<div class="mt-3">${tagsHtml}</div>`;
                }

                markup += `
                    <div class="col-md-6 col-lg-4">
                        <div class="card h-100 shadow-sm rounded position-relative">
                            <div class="card-body">
                                <h5 class="card-title">${note.title}</h5>
                                <p class="card-text text-muted small">üïí Atualizada em ${note.updatedAt ? new Date(note.updatedAt).toLocaleString() : 'N/A'}</p>
                                <p class="card-text">${note.content?.substring(0, 100) ?? ""}</p>
                                <a class="btn btn-sm btn-outline-primary me-2" href="/Notes/Edit/${note.noteId}">‚úèÔ∏è Editar</a>
                                <a class="btn btn-sm btn-outline-danger me-2" href="/Notes/Delete/${note.noteId}">üóëÔ∏è Eliminar</a>
                                <button class="btn btn-sm btn-outline-info me-2" onclick="openShareModal(${note.noteId})">ü§ù Partilhar</button>
                                <button class="btn btn-sm btn-outline-secondary" onclick="openTagModal(${note.noteId})">üè∑Ô∏è + Tags</button>
                                ${tagsHtml}
                            </div>
                        </div>
                    </div>
                `;
            });
            list.innerHTML = markup;
        }
    }

    <!-- Fun√ß√£o que abre o modal para partilhar uma nota -->
    function openShareModal(noteId) {
        document.getElementById("shareNoteId").value = noteId;
        document.getElementById("shareWith").value = "";
        document.getElementById("canEdit").checked = false;
        new bootstrap.Modal(document.getElementById('shareModal')).show();
    }

    <!-- Vari√°vel global para guardar a nota atual para adicionar tags -->
    let currentNoteId = null;

    <!-- Fun√ß√£o que abre o modal para adicionar tags -->
    function openTagModal(noteId) {
        currentNoteId = noteId;
        const modalEl = document.getElementById('tagModal');
        const modal = new bootstrap.Modal(modalEl);
        modal.show();

        refreshAvailableTags();
    }

    <!-- Fun√ß√£o que adiciona uma tag selecionada a uma nota -->
    function addTagToNote() {
        const tagId = document.getElementById('availableTags').value;
        if (!tagId || !currentNoteId) return;

        fetch(`${tagsApiUrl}/notes`, {
            method: "POST",
            headers: getAuthHeaders(),
            body: JSON.stringify({ noteId: currentNoteId, tagId: parseInt(tagId) })
        })
            .then(response => {
                if (response.ok) {
                    bootstrap.Modal.getInstance(document.getElementById("tagModal")).hide();
                    loadNotes();
                } else {
                    response.json().then(err => alert(err.message || "Erro ao adicionar tag"));
                }
            });
    }

    <!-- Fun√ß√£o que abre o modal para criar uma nova tag -->
    function openCreateTagModal() {
        document.getElementById("inlineTagName").value = "";
        new bootstrap.Modal(document.getElementById("inlineTagModal")).show();
    }

    <!-- Listener para submiss√£o do formul√°rio de cria√ß√£o de nova tag -->
    document.getElementById("inlineTagForm").addEventListener("submit", async function (e) {
        e.preventDefault();
        const name = document.getElementById("inlineTagName").value;

        const response = await fetch("/api/TagsApi", {
            method: "POST",
            headers: getAuthHeaders(),
            body: JSON.stringify({ name })
        });

        if (response.ok) {
            bootstrap.Modal.getInstance(document.getElementById("inlineTagModal")).hide();
            refreshAvailableTags();
        } else {
            const err = await response.json();
            alert(err.message || "Erro ao criar tag");
        }
    });

    <!-- Fun√ß√£o que atualiza a lista de tags dispon√≠veis no dropdown -->
    async function refreshAvailableTags() {
        const response = await fetch(tagsApiUrl, { headers: getAuthHeaders() });
        const tags = await response.json();

        const select = document.getElementById("availableTags");
        select.innerHTML = `<option value="">Seleciona uma tag</option>`;
        tags.forEach(tag => {
            select.innerHTML += `<option value="${tag.tagId}">${tag.name}</option>`;
        });
    }

    <!-- Listener para submiss√£o do formul√°rio de partilha -->
    document.getElementById("shareForm").addEventListener("submit", async function (e) {
        e.preventDefault();

        const noteId = document.getElementById("shareNoteId").value;
        const username = document.getElementById("shareWith").value.trim();
        const canEdit = document.getElementById("canEdit").checked;

        if (!username) {
            alert("Por favor, insira o nome do utilizador.");
            return;
        }

        const response = await fetch(`${noteShareapiUrl}`, {
            method: "POST",
            headers: getAuthHeaders(),
            body: JSON.stringify({
                noteId: parseInt(noteId),
                shareWithUsername: username,
                canEdit: canEdit
            })
        });

        if (response.ok) {
            bootstrap.Modal.getInstance(document.getElementById("shareModal")).hide();
            alert("Nota partilhada com sucesso!");
        } else {
            const err = await response.json();
            alert(err.message || "Erro ao partilhar nota.");
        }
    });

    <!-- Carrega as notas quando a p√°gina termina de carregar -->
    document.addEventListener("DOMContentLoaded", () => {
        loadNotes();
    });
</script>
