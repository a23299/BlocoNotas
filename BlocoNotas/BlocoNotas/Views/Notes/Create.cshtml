@model BlocoNotas.Models.Note;

@{
    ViewData["Title"] = "Criar Nota";  <!-- Define o t칤tulo da p치gina -->
}

<!-- T칤tulo principal da p치gina -->
<h2>@ViewData["Title"]</h2>

<!-- Container principal para centralizar o formul치rio -->
<div class="container py-5 d-flex justify-content-center">
    <div class="col-md-8">
        <div class="card shadow border-0">
            <div class="card-body">
                <!-- T칤tulo da card para criar nova nota -->
                <h2 class="card-title mb-4 text-primary text-center">游닇 Criar Nova Nota</h2>

                <!-- 츼rea para mostrar alertas de sucesso ou erro dinamicamente -->
                <div id="alertArea"></div>

                <!-- Formul치rio para cria칞칚o de nova nota -->
                <form id="noteForm">
                    <!-- Campo para o t칤tulo da nota (obrigat칩rio) -->
                    <div class="mb-3">
                        <label for="title" class="form-label">T칤tulo</label>
                        <input type="text" class="form-control" id="title" name="title" required />
                    </div>

                    <!-- Campo para o conte칰do da nota -->
                    <div class="mb-3">
                        <label for="content" class="form-label">Conte칰do</label>
                        <textarea class="form-control" id="content" name="content" rows="5"></textarea>
                    </div>

                    <!-- Bot칫es para cancelar ou submeter o formul치rio -->
                    <div class="d-flex justify-content-between">
                        <a href="/Notes" class="btn btn-outline-secondary">Cancelar</a>
                        <button type="submit" class="btn btn-success">Guardar Nota</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    // Captura o evento submit do formul치rio para enviar via fetch API
    document.getElementById("noteForm").addEventListener("submit", async e => {
        e.preventDefault();  // Impede o reload da p치gina

        // Verifica se o utilizador est치 autenticado (token guardado no localStorage)
        const token = localStorage.getItem("token");
        if (!token) {
            showAlert("danger", "Precisa de estar autenticado para criar notas.");
            return;
        }

        // Cria objeto note com os valores do formul치rio
        const note = {
            Title: document.getElementById("title").value,
            Content: document.getElementById("content").value
        };

        try {
            // Envia o pedido POST para a API criar nova nota com token de autentica칞칚o
            const response = await fetch("/api/NotesApi", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": "Bearer " + token
                },
                body: JSON.stringify(note)
            });

            if (response.ok) {
                // Se sucesso, redireciona para a lista de notas
                window.location.href = "/Notes";
            } else {
                // Se erro, obt칠m a mensagem e mostra alerta
                const data = await response.json();
                showAlert("danger", data.message || "Erro ao criar nota.");
            }
        } catch (error) {
            // Se falha na conex칚o, mostra mensagem e loga erro no console
            showAlert("danger", "Erro ao conectar com o servidor.");
            console.error(error);
        }
    });

    // Fun칞칚o para mostrar alertas dinamicamente na p치gina
    function showAlert(type, message) {
        const alertArea = document.getElementById("alertArea");
        alertArea.innerHTML = `
            <div class="alert alert-${type} alert-dismissible fade show mt-3" role="alert">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Fechar"></button>
            </div>
        `;
    }
</script>
