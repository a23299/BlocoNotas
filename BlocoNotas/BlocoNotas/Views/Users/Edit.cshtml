@model BlocoNotas.Models.ApplicationUser

@{
    ViewData["Title"] = "Editar Utilizador";
}

<div class="container py-5 d-flex justify-content-center">
    <div class="card shadow-sm border-0" style="max-width: 480px; width: 100%;">
        <div class="card-body">
            <h2 class="card-title text-center mb-4 text-primary fw-bold">@ViewData["Title"]</h2>

            <div id="alertArea"></div>

            <form id="editUserForm" class="needs-validation" novalidate>
                <input type="hidden" id="UserId" value="@Model.Id" />

                <div class="mb-3">
                    <label for="username" class="form-label fw-semibold">Nome</label>
                    <input type="text" class="form-control" id="username" required />
                    <div class="invalid-feedback">Por favor insira o nome.</div>
                </div>

                <div class="mb-3">
                    <label for="email" class="form-label fw-semibold">Email</label>
                    <input type="email" class="form-control" id="email" required />
                    <div class="invalid-feedback">Por favor insira um email v√°lido.</div>
                </div>

                <div class="mb-4">
                    <label for="password" class="form-label fw-semibold">Password</label>
                    <div class="input-group">
                        <input type="password" class="form-control" id="password" />
                        <button type="button" class="btn btn-outline-secondary" id="togglePassword" title="Mostrar password">
                            üëÅ
                        </button>
                    </div>
                    <small class="form-text text-muted">Deixe em branco para manter a password atual.</small>
                </div>

                <div class="d-flex justify-content-between">
                    <a href="/Users/Index" class="btn btn-outline-secondary px-4">Cancelar</a>
                    <button type="submit" class="btn btn-success px-4">üíæ Guardar Altera√ß√µes</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    // Bootstrap validation
    (() => {
        'use strict'
        const form = document.getElementById('editUserForm');
        form.addEventListener('submit', event => {
            if (!form.checkValidity()) {
                event.preventDefault();
                event.stopPropagation();
            }
            form.classList.add('was-validated');
        }, false);
    })();

    const passwordInput = document.getElementById("password");
    const togglePasswordBtn = document.getElementById("togglePassword");

    togglePasswordBtn.addEventListener("mousedown", () => {
        passwordInput.type = "text";
    });

    togglePasswordBtn.addEventListener("mouseup", () => {
        passwordInput.type = "password";
    });

    togglePasswordBtn.addEventListener("mouseleave", () => {
        passwordInput.type = "password";
    });

    document.addEventListener("DOMContentLoaded", async () => {
        const userId = document.getElementById("UserId").value;
        const nameInput = document.getElementById("username");
        const emailInput = document.getElementById("email");
        const token = localStorage.getItem("token");

        try {
            const response = await fetch(`/api/UsersApi/${userId}`, {
                headers: {
                    "Authorization": `Bearer ${token}`
                }
            });

            if (!response.ok) throw new Error("Erro ao carregar dados");

            const user = await response.json();
            nameInput.value = user.userName;
            emailInput.value = user.email;
        } catch (err) {
            showAlert("danger", "Erro: " + err.message);
        }

        document.getElementById("editUserForm").addEventListener("submit", async e => {
            e.preventDefault();

            if (!e.target.checkValidity()) return;

            const updatedUser = {
                id: userId,
                userName: nameInput.value,
                email: emailInput.value
            };

            const newPassword = passwordInput.value.trim();
            if (newPassword.length > 0) {
                updatedUser.password = newPassword;
            }

            try {
                const res = await fetch(`/api/UsersApi/${userId}`, {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": `Bearer ${token}`
                    },
                    body: JSON.stringify(updatedUser)
                });

                if (res.ok) {
                    showAlert("success", "Utilizador atualizado com sucesso.");
                    form.classList.remove('was-validated');
                    passwordInput.value = ""; // limpa password
                } else {
                    const errText = await res.text();
                    showAlert("danger", "Erro ao guardar: " + errText);
                }
            } catch (err) {
                showAlert("danger", "Erro: " + err.message);
            }
        });
    });

    function showAlert(type, message) {
        const alertArea = document.getElementById("alertArea");
        alertArea.innerHTML = `
            <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Fechar"></button>
            </div>
        `;
    }
</script>
