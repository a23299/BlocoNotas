@model BlocoNotas.Models.ApplicationUser

@{
    ViewData["Title"] = "Criar Utilizador";
}

<div class="container mt-4">
    <h2>Criar Novo Utilizador</h2>

    <div id="alertArea"></div>

    <form id="createUserForm" class="mt-3">
        <div class="form-group">
            <label for="username">Nome</label>
            <input type="text" class="form-control" id="username" required />
        </div>

        <div class="form-group">
            <label for="email">Email</label>
            <input type="email" class="form-control" id="email" required />
        </div>

        <div class="form-group">
            <label for="password">Password</label>
            <input type="password" class="form-control" id="password" required />
        </div>

        <button type="submit" class="btn btn-primary mt-3">Criar</button>
        <a href="/Users/Index" class="btn btn-secondary mt-3">Cancelar</a>
    </form>
</div>

<script>
let nextUserId = null;

document.addEventListener("DOMContentLoaded", async () => {
    try {
        const res = await fetch("/api/UsersApi");
        if (!res.ok) throw new Error("Erro ao carregar utilizadores existentes");

        const users = await res.json();
        const numericNameIds = users
            .map(u => parseInt(u.userId))
            .filter(id => !isNaN(id));

        const maxId = numericNameIds.length > 0 ? Math.max(...numericNameIds) : 0;
        nextUserId = maxId + 1;
    } catch (err) {
        console.error("Erro ao calcular nameId:", err);
        nextUserId = 1;
    }
});

document.getElementById("createUserForm").addEventListener("submit", async e => {
    e.preventDefault();

    const userName = document.getElementById("username").value;
    const email = document.getElementById("email").value;
    const password = document.getElementById("password").value;

    const user = {
        userName: userName,
        email: email,
        password: password
    };

    try {
        const res = await fetch("/api/UsersApi", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(user)
        });

        if (res.ok) {
            const json = await res.json();
            showAlert("success", `Utilizador criado com sucesso (ID: ${json.userId})`);
            document.getElementById("createUserForm").reset();
        } else {
            const err = await res.text();
            showAlert("danger", "Erro ao criar: " + err);
        }
    } catch (err) {
        showAlert("danger", "Erro: " + err.message);
    }
});


function showAlert(type, message) {
    const alertArea = document.getElementById("alertArea");
    alertArea.innerHTML = `
        <div class="alert alert-${type} alert-dismissible fade show" role="alert">
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Fechar"></button>
        </div>
    `;
}
</script>
