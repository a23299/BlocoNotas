@model IEnumerable<BlocoNotas.Models.ApplicationUser>

@{
    ViewData["Title"] = "Lista de Utilizadores";
}

<div class="container mt-5">
    <h2 class="mb-4 text-primary border-bottom pb-2">Lista de Utilizadores</h2>

    <div class="table-responsive shadow-sm rounded">
        <table class="table table-hover align-middle mb-0" id="usersTable">
            <thead class="table-primary text-primary">
            <tr>
                <th>ID</th>
                <th>Nome</th>
                <th>Email</th>
                <th class="text-center">A√ß√µes</th>
            </tr>
            </thead>
            <tbody>
            <!-- Linhas geradas via JS -->
            </tbody>
        </table>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", async () => {
        const tableBody = document.querySelector("#usersTable tbody");
        const token = localStorage.getItem("token");
        const roles = JSON.parse(localStorage.getItem("roles") || "[]");

        if (!token) {
            tableBody.innerHTML = `<tr><td colspan="4" class="text-danger text-center">Necessita fazer login para ver esta p√°gina.</td></tr>`;
            return;
        }

        try {
            const response = await fetch("/api/UsersApi", {
                headers: {
                    "Authorization": `Bearer ${token}`
                }
            });

            if (response.status === 401) {
                tableBody.innerHTML = `<tr><td colspan="4" class="text-danger text-center">N√£o autorizado. Fa√ßa login novamente.</td></tr>`;
                return;
            }

            if (!response.ok) throw new Error("Erro ao carregar utilizadores");

            const users = await response.json();
            const isAdmin = roles.includes("Admin");

            tableBody.innerHTML = ""; // limpa

            users.forEach(user => {
                const userIsAdmin = (user.roles || []).includes("Admin");
                const canPromote = isAdmin && !userIsAdmin;

                const row = document.createElement("tr");

                row.innerHTML = `
                    <td class="text-truncate" style="max-width:120px;">${user.id}</td>
                    <td>${user.userName}</td>
                    <td>${user.email}</td>
<td class="text-center" style="white-space: nowrap;">
    <a href="/Users/Edit/${user.id}" class="btn btn-sm btn-outline-primary me-1" title="Editar Utilizador">
        <i class="bi bi-pencil me-1"></i> ‚úèÔ∏è Editar
    </a>
    <a href="/Users/Details/${user.id}" class="btn btn-sm btn-outline-info me-1" title="Detalhes">
        <i class="bi bi-info-circle me-1"></i> ‚öôÔ∏è Detalhes
    </a>
    <button class="btn btn-sm btn-outline-danger me-1" title="Eliminar Utilizador" onclick="deleteUser('${user.id}')">
        <i class="bi bi-trash me-1"></i> üóëÔ∏è Eliminar
    </button>
    ${canPromote ? `<button class="btn btn-sm btn-warning" title="Dar permiss√µes de Admin" onclick="promoteToAdmin('${user.id}')">
        <i class="bi bi-shield-lock me-1"></i> Dar Admin
    </button>` : ''}
</td>

                `;

                tableBody.appendChild(row);
            });

        } catch (error) {
            tableBody.innerHTML = `<tr><td colspan="4" class="text-danger text-center">${error.message}</td></tr>`;
        }
    });

    async function deleteUser(id) {
        if (!confirm("Tem a certeza que quer eliminar este utilizador?")) return;

        const token = localStorage.getItem("token");

        try {
            const res = await fetch(`/api/UsersApi/${id}`, {
                method: "DELETE",
                headers: {
                    "Authorization": `Bearer ${token}`
                }
            });

            if (res.ok) {
                location.reload();
            } else {
                alert("Erro ao eliminar utilizador");
            }
        } catch (err) {
            alert("Erro: " + err.message);
        }
    }

    async function promoteToAdmin(userId) {
        const token = localStorage.getItem("token");

        if (!confirm("Tem a certeza que quer promover este utilizador a Admin?")) return;

        try {
            const res = await fetch(`/api/UsersApi/MakeAdmin/${userId}`, {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${token}`
                }
            });

            if (res.ok) {
                alert("Utilizador promovido a Admin com sucesso!");
                location.reload();
            } else {
                const error = await res.json();
                alert("Erro: " + (error.message || JSON.stringify(error)));
            }
        } catch (err) {
            alert("Erro: " + err.message);
        }
    }
</script>
