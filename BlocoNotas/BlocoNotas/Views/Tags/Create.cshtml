@model BlocoNotas.Models.Tag

@{
    ViewData["Title"] = "Criar Tag"; <!-- Define o t√≠tulo da p√°gina -->
}

<div class="container py-5 d-flex justify-content-center">
    <div class="col-md-6">
        <div class="card shadow border-0">
            <div class="card-body">
                <h2 class="card-title mb-4 text-primary text-center">üè∑Ô∏è Criar Nova Tag</h2> <!-- T√≠tulo do formul√°rio -->

                <div id="alertArea"></div> <!-- √Årea para exibir mensagens de alerta -->

                <form id="tagForm"> <!-- Formul√°rio para criar uma nova tag -->
                    <div class="mb-3">
                        <label for="tagName" class="form-label">Nome da Tag</label> <!-- Label para o input da tag -->
                        <input type="text" class="form-control" id="tagName" name="name" required /> <!-- Input obrigat√≥rio para o nome da tag -->
                    </div>

                    <div class="d-flex justify-content-between">
                        <a href="/Tags" class="btn btn-outline-secondary">Cancelar</a> <!-- Bot√£o para cancelar e voltar √† lista de tags -->
                        <button type="submit" class="btn btn-success">Guardar Tag</button> <!-- Bot√£o para submeter o formul√°rio -->
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Evento para capturar o envio do formul√°rio
        document.getElementById("tagForm").addEventListener("submit", async function (e) {
            e.preventDefault(); // Evita o envio tradicional do formul√°rio

            const name = document.getElementById("tagName").value; // Obt√©m o valor do input do nome da tag
            const token = localStorage.getItem("token"); // Obt√©m o token JWT do armazenamento local para autentica√ß√£o

            // Envia requisi√ß√£o POST para a API de tags
            const response = await fetch("/api/TagsApi", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json", // Indica que o corpo da requisi√ß√£o √© JSON
                    "Authorization": `Bearer ${token}` // Cabe√ßalho de autoriza√ß√£o com token JWT
                },
                body: JSON.stringify({ name }) // Envia o nome da tag no corpo da requisi√ß√£o
            });

            if (response.ok) {
                window.location.href = "/Tags"; // Se sucesso, redireciona para a p√°gina de lista de tags
            } else {
                const data = await response.json(); // L√™ a resposta de erro da API
                showAlert("danger", data.message ?? "Erro ao criar a tag."); // Mostra alerta de erro
            }
        });

        // Fun√ß√£o para mostrar alertas din√¢micos na p√°gina
        function showAlert(type, message) {
            const alertArea = document.getElementById("alertArea");
            alertArea.innerHTML = `
            <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Fechar"></button>
            </div>
        `;
        }
    </script>
}
