@{
    Layout = "_Layout";
    ViewData["Title"] = "Notas Partilhadas Comigo";
}

<div class="container py-5">
    <h1 class="mb-4 text-primary">@ViewData["Title"]</h1>

    <div id="sharedNotesList" class="row gy-4">

        <!-- Modal: Remover Partilha -->
        <div class="modal fade" id="removeShareModal" tabindex="-1" aria-labelledby="removeShareModalLabel"
             aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header bg-danger text-white">
                        <h5 class="modal-title" id="removeShareModalLabel">Remover Partilha</h5>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                                aria-label="Fechar"></button>
                    </div>
                    <div class="modal-body">
                        <p class="mb-0">Tem a certeza que deseja remover o acesso a esta nota partilhada? Esta a√ß√£o n√£o
                            afeta o autor da nota.</p>
                        <input type="hidden" id="noteIdToRemove">
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                        <button type="button" class="btn btn-danger" onclick="confirmRemoveShare()">Remover</button>
                    </div>
                </div>
            </div>
        </div>
        <!-- Notas partilhadas carregadas aqui -->
    </div>
</div>

<script>
    const sharedNotesApi = "/api/NoteSharesApi/shared-with-me";
    const token = localStorage.getItem("token");


    // Fun√ß√£o que remove a partilha da nota (para quem recebeu a partilha)
    async function openRemoveShareModal(noteId) {
        if (!confirm("Tem a certeza que deseja remover o acesso a esta nota?")) return;

        const response = await fetch(`/api/NoteSharesApi/remove-my-access/${noteId}`, {
            method: "DELETE",
            headers: getAuthHeaders()
        });

        if (response.ok) {
            alert("Acesso removido com sucesso.");
            loadSharedNotes(); // atualiza a lista
        } else {
            const error = await response.json();
            alert(error.message ?? "Erro ao remover acesso √† nota.");
        }
    }

    function getAuthHeaders() {
        const headers = {"Content-Type": "application/json"};
        if (token) {
            headers["Authorization"] = `Bearer ${token}`;
        }
        return headers;
    }

    async function loadSharedNotes() {
        const response = await fetch(sharedNotesApi, {headers: getAuthHeaders()});
        const list = document.getElementById("sharedNotesList");
        list.innerHTML = "";

        if (!response.ok) {
            list.innerHTML = `<div class="col-12"><div class="alert alert-danger shadow-sm">Erro ao carregar notas partilhadas.</div></div>`;
            return;
        }

        const notes = await response.json();

        if (notes.length === 0) {
            list.innerHTML = `<div class="col-12"><p class="text-muted fst-italic">Nenhuma nota foi partilhada contigo.</p></div>`;
            return;
        }

        let markup = "";
        notes.forEach(note => {
            let tagsHtml = "";
            if (note.tags?.length > 0) {
                tagsHtml = note.tags.map(tag => `<span class="badge bg-info text-dark me-1">${escapeHtml(tag)}</span>`).join("");
                tagsHtml = `<div class="mt-3">${tagsHtml}</div>`;
            }

            let actionsHtml = "";

            if (note.canEdit) {
                actionsHtml += `<a href="/Notes/Edit/${note.noteId}" class="btn btn-sm btn-outline-primary me-2">‚úèÔ∏è Editar</a>`;
            }

            actionsHtml += `<button class="btn btn-sm btn-outline-danger" onclick="openRemoveShareModal(${note.noteId})">üóëÔ∏è Remover Partilha</button>`;

            markup += `
                <div class="col-md-6 col-lg-4">
                    <div class="card h-100 shadow-sm rounded position-relative">
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">${escapeHtml(note.title)}</h5>
                            <p class="card-text text-muted small">üïí Atualizada em ${note.updatedAt ? new Date(note.updatedAt).toLocaleString() : 'N/A'}</p>
                            <p class="card-text flex-grow-1">${escapeHtml(note.content?.substring(0, 100) ?? "")}${note.content?.length > 100 ? "..." : ""}</p>
                            <p class="card-text"><small><strong>De:</strong> ${escapeHtml(note.user?.userName ?? "Desconhecido")}</small></p>
<div class="mt-auto d-flex justify-content-start align-items-center">
    ${actionsHtml}
</div>
                            ${tagsHtml}
                        </div>
                    </div>
                </div>
                
            `;
        });

        list.innerHTML = markup;
    }

    function escapeHtml(text) {
        if (!text) return "";
        return text
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;")
            .replace(/`/g, "&#96;");
    }

    document.addEventListener("DOMContentLoaded", loadSharedNotes);
</script>
